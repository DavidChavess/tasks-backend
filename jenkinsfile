pipeline {
    agent any
    stages {
        stage ('Build Backend') {
            steps {
                sh 'mvn clean package -DskipTests=true'
            } 
        }
        stage ('Testes Unitarios') {
            steps {
                sh 'mvn test'
            } 
        }
        stage ('Sonar Analysis') {
            environment {
                scannerHome = tool 'SONAR_SCANNER'
            }
            steps {
                withSonarQubeEnv('SONAR_LOCAL'){
                    sh "${scannerHome}/bin/sonar-scanner -e -Dsonar.projectKey=DeployBack -Dsonar.host.url=http://localhost:9000 -Dsonar.login=460edf24ec01440aa98a480ac26b1ec2b87ea72a -Dsonar.java.binaries=target -Dsonar.coverage.exclusions=**/src/test/**,**/model/**,**TaskBackendApplication.java"
                }
            } 
        }
        stage ('Quality Gate') {
            steps {
                sleep(10)
                timeout(time:1, unit:'MINUTES'){
                    waitForQualityGate abortPipeline: true
                }
            } 
        }
        stage ('Deploy Back') {
            steps {
                deploy adapters: [tomcat8(credentialsId: 'tomcat', path: '', url: 'http://localhost:8001/')], contextPath: 'tasks-backend', war: 'target/tasks-backend.war'
            }
        }
        stage ('APIs Test') {
            steps {
                dir ('api-test'){
                    git branch: 'main', credentialsId: 'gitHub', url: 'https://github.com/DavidChavess/tasks-test-api-rest'
                    sh 'mvn test' 
                }
            }
        }
        stage ('Deploy Front') {
            steps {
                dir ('frontend'){
                    git branch: 'master', credentialsId: 'gitHub', url: 'https://github.com/DavidChavess/tasks-frontend'
                    sh 'mvn clean package'
                    deploy adapters: [tomcat8(credentialsId: 'tomcat', path: '', url: 'http://localhost:8001/')], contextPath: 'tasks', war: 'target/tasks.war'
                }
            }
        }
        stage ('Deploy prod'){
            steps { 
                sh 'sudo docker-compose build'
                sh 'sudo docker-compose up -d'
            }
        }
    }
    post {
        always {
            junit allowEmptyResults: true, testResults: 'target/surefire-reports/*.xml, api-test/target/surefire-reports/*.xml'
        }
    }
}
